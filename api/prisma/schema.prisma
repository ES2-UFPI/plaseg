generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UnitType {
  UF
  MUNICIPALITY
}

enum EmploymentType {
  CLT
  PJ
  OTHERS
}

enum Role {
  ADMIN
  MUNICIPALITY
  ADMIN_MASTER
}

enum TypeGroup {
  SERVICE
  OPPORTUNITY
  CATEGORY
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  document String @unique
  phone    String @unique
  password String
  role     Role   @default(MUNICIPALITY)

  municipality Municipality? @relation("UserMunicipality")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("users")
}

model Type {
  id          String    @id @default(uuid())
  description String    @unique
  group       TypeGroup
  parentId    String?

  parent   Type?  @relation("TypeHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Type[] @relation("TypeHierarchy")

  opportunities Opportunity[]
  baseProducts  BaseProduct[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("types")
}

model Municipality {
  id                 String   @id @default(uuid())
  name               String
  guardInitialDate   DateTime
  guardCount         Int
  trafficInitialDate DateTime
  trafficCount       Int
  federativeUnit     String
  unitType           UnitType

  userId String @unique
  user   User   @relation("UserMunicipality", fields: [userId], references: [id])

  allocationDepartments AllocationDepartment[]
  maintenanceContracts  MaintenanceContract[]
  qualifiedStaff        QualifiedStaff[]
  projectsPartnerships  ProjectPartnership[]
  managements           Management[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("municipalities")
}

model AllocationDepartment {
  id          String @id @default(uuid())
  description String
  address     String

  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("allocation_departments")
}

model MaintenanceContract {
  id          String @id @default(uuid())
  description String
  attachment  String

  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("maintenance_contracts")
}

model QualifiedStaff {
  id             String         @id @default(uuid())
  name           String
  sector         String
  education      String
  experience     String
  employmentType EmploymentType
  document       String
  isResponsible  Boolean

  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("qualified_staffs")
}

model ProjectPartnership {
  id        String @id @default(uuid())
  term      String
  agency    String
  objective String
  status    String

  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("project_partnerships")
}

model Management {
  id          String   @id @default(uuid())
  initialDate DateTime
  endDate     DateTime

  managerName    String
  managerCpf     String
  managerEmail   String
  managerAddress String
  managerPhone   String

  adminManagerName    String
  adminManagerCpf     String
  adminManagerEmail   String
  adminManagerAddress String
  adminManagerPhone   String

  legislationName    String
  legislationCpf     String
  legislationEmail   String
  legislationAddress String
  legislationPhone   String

  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("managements")
}

model RequiredDocument {
  id          String @id @default(uuid())
  name        String
  description String
  model       String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])
  opportunityId String

  @@map("required_documents")
}

model Opportunity {
  id                    String   @id @default(uuid()) @map("id")
  title                 String   @unique
  slug                  String   @unique
  responsibleAgency     String
  description           String
  availableValue        Decimal
  minValue              Decimal
  maxValue              Decimal
  initialDeadline       DateTime
  finalDeadline         DateTime
  requiresCounterpart   Boolean
  counterpartPercentage Decimal?
  isActive              Boolean  @default(true)
  releasedForAll        Boolean  @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  Type   Type   @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId String

  requiredDocuments RequiredDocument[]
  documents         Document[]

  @@map("opportunities")
}

model BaseProduct {
  id                   String   @id @default(uuid())
  code                 String   @unique
  name                 String
  technicalDescription String
  budget1              Decimal
  budget1Validity      DateTime
  budget2              Decimal
  budget2Validity      DateTime
  budget3              Decimal
  budget3Validity      DateTime
  unitValue            Decimal

  Type   Type   @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId String

  SpecificProduct SpecificProduct[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("base_products")
}

model SpecificProduct {
  id             String   @id @default(uuid())
  brand          String
  model          String
  description    String
  unitValue      Decimal
  warrantyMonths Int
  budget         Decimal
  budgetValidity DateTime

  baseProduct   BaseProduct @relation(fields: [baseProductId], references: [id], onDelete: Cascade)
  baseProductId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("specific_products")
}

model Field {
  id       String   @id @default(uuid())
  name     String
  value    String?
  parentId String?
  ready    Boolean? @default(false)

  parent   Field?  @relation("FieldHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Field[] @relation("FieldHierarchy")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  document   Document @relation(fields: [documentId], references: [id])
  documentId String

  @@map("fields")
}

model Document {
  id   String @id @default(uuid())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id])
  opportunityId String?

  projectType   ProjectType? @relation(fields: [projectTypeId], references: [id])
  projectTypeId String?
  
  fields Field[]


  @@map("documents")
}

model ProjectType {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  documents              Document[]

  @@map("project_types")
}